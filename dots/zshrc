# zmodload zsh/zprof # top of your .zshrc file

# set the keyboard mode in terminal (if loaded after the plugins some stuff dont work)
set -o emacs # or vi if you prefer

# load initial stuff
. $ZSH/config
. $ZSH/prompt
. $ZSH/aliases
. $ZSH/completion
. $ZSH/correction
. $ZSH/key_bindings
# for simpler single file plugins
. $ZSH/plugins/*
# other plugins
. $ZSH/plugins/zsh-vi-mode/zsh-vi-mode.plugin.zsh
. $ZSH/plugins/fzf-tab/fzf-tab.plugin.zsh

# use .localrc for settings specific to one system
[[ -f ~/.localrc ]] && . ~/.localrc

# http://talkings.org/post/5236392664/zsh-and-slow-git-completion
# superfly tnt git autocomplete
# __git_files () {
#   _wanted files expl 'local files' _files
# }

# print current directory to title bar
set_title_and_prompt() {
  # print -Pn "\e]2; ${PWD/#$HOME/~}\a"
  set_prompt
}
precmd () { set_title_and_prompt }
preexec () { set_title_and_prompt }

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
[ -f /usr/share/fzf/key-bindings.zsh ] && source /usr/share/fzf/key-bindings.zsh
[ -f /usr/share/fzf/completion.zsh ] && source /usr/share/fzf/completion.zsh
#export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'
#export FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs --hidden'
# CTRL-/ to toggle small preview window to see the full command
# CTRL-Y to copy the command into clipboard using pbcopy
# --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'
export FZF_CTRL_R_OPTS="
  --preview 'echo {}' --preview-window up:hidden:wrap
  --bind 'ctrl-/:toggle-preview'
  --color header:italic"
  # --header 'Press CTRL-Y to copy command into clipboard'"

#export FZF_DEFAULT_COMMAND='ag -g ""'

# fasd
eval "$(fasd --init auto)"

# zsh extra syntax highlighting from brew
[ -f /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ] && source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# heroku autocomplete setup
HEROKU_AC_ZSH_SETUP_PATH=~/Library/Caches/heroku/autocomplete/zsh_setup && test -f $HEROKU_AC_ZSH_SETUP_PATH && source $HEROKU_AC_ZSH_SETUP_PATH;

# using python instead of /usr/bin/stat directly
# https://github.com/aluxian/fish-kube-prompt/pull/11/files
__stat_mtime () {
  #-- cross-platform workaround; POSIX didn't specify stat(1) and so
  #-- its interface is incompatibly different on Mac OS and Linux.
  #-- see https://unix.stackexchange.com/q/561927/3097
  python -c "print(__import__('os').stat(__import__('sys').argv[1]).st_mtime)" $argv
}

lastmod () {
	local result=$(( $(date +"%s") - $(__stat_mtime "%m" $1) ))
  return result
}

stale () {
  local filename=$1
  local maxminutes=$2
  [[ $(lastmod $filename; echo $?) -gt $maxminutes*60 ]]
}

cacheplease () {
  if [ -f $1 ] && ! stale $1 $2; then
    #echo "exists"
    source $1
  else
    #echo "reload"
    local before=$(ENV)

    # manpath
    export MANPATH="/usr/local/man:/usr/local/mysql/man:/usr/local/git/man:$MANPATH"

    # node modules (npm)
    export PATH="./node_modules/.bin:$PATH"

    # java home
    export JAVA_HOME=$(/usr/libexec/java_home)

    # node path
    export NODE_PATH=$(npm root --quiet -g)

    # go
    export GOROOT=$(brew --prefix golang)/libexec
    export GOPATH=$HOME/go
    export PATH=$GOPATH/bin:${GOROOT}/bin:$PATH

    # nodenv -- use "--no-rehash" for faster initialization
    if which nodenv 1>/dev/null 2>&1; then eval "$(nodenv init - zsh)"; fi

    # pyenv 
    if which pyenv 1>/dev/null 2>&1; then 
	    export PYENV_ROOT="$HOME/.pyenv"
	    export PATH="$PYENV_ROOT/bin:$PATH"
	    eval "$(pyenv init --path)"
	    eval "$(pyenv init - zsh)"; 
    fi

    # elastic beanstalk
    export PATH="$HOME/.ebcli-virtual-env/executables:$PATH"


    local after=$(ENV)

    output=$(comm -23 <(printf '%s\n' $after) <(printf '%s\n' $before))
    echo $output | sed 's/^\(.*\)=\(.*\)$/\1="\2"/' > $1
  fi
}
# cache for X minutes
#cacheplease $HOME/.cachedenv 18000

#test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

export PATH=/usr/bin:$HOME/.local/bin:$PATH
export PATH="./node_modules/.bin:$PATH"
export PNPM_HOME="/home/kyriacos/.local/share/pnpm"
export PATH="$PNPM_HOME:$PATH"
# # nodenv -- use "--no-rehash" for faster initialization
# if which nodenv 1>/dev/null 2>&1; then eval "$(nodenv init - zsh)"; fi

# docker - linux
export DOCKER_HOST=unix:///run/user/1000/docker.sock


# add flatpak bins
#export PATH=$PATH:$HOME/.local/share/flatpak/exports/bin
#
# vscode flatpak
#alias code="flatpak run com.visualstudio.code"
#

# temporarily adding this plugin to test out the functionality
#test -e /usr/share/zsh/plugins/zsh-vi-mode/zsh-vi-mode.plugin.zsh && source /usr/share/zsh/plugins/zsh-vi-mode/zsh-vi-mode.plugin.zsh


alias nvim-lazy="NVIM_APPNAME=LazyVim nvim"
alias nvim-kick="NVIM_APPNAME=kickstart nvim"
alias nvim-chad="NVIM_APPNAME=NvChad nvim"
alias nvim-astro="NVIM_APPNAME=AstroNvim nvim"

function nvims() {
  items=("default" "kickstart" "LazyVim" "NvChad" "AstroNvim")
  config=$(printf "%s\n" "${items[@]}" | fzf --prompt=" Neovim Config  " --height=~50% --layout=reverse --border --exit-0)
  if [[ -z $config ]]; then
    echo "Nothing selected"
    return 0
  elif [[ $config == "default" ]]; then
    config=""
  fi
  NVIM_APPNAME=$config nvim $@
}

# bindkey -s ^a "nvims\n"
# export VI_MODE_SET_CURSOR=true
#
# autoload edit-command-line
# zle -N edit-command-line
# bindkey -M vicmd v edit-command-line
# Use ESC to edit the current command line:
autoload -U edit-command-line
zle -N edit-command-line
bindkey '\033' vicmd v edit-command-line # hit ESC then v v  (esc-vv)

alias shttp='python3 -m http.server 9000'
export GOPATH=$(go env GOPATH)
export PATH=$PATH:$GOPATH/bin
